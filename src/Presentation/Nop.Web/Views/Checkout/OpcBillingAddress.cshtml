@model CheckoutBillingAddressModel
@using Nop.Core.Infrastructure
@{ 
    var service = EngineContext.Current.Resolve<Nop.Services.Common.IAddressService>();
    var currentCustomer = workContext.GetCurrentCustomerAsync().Result;
    var billingAddress = currentCustomer?.BillingAddressId;
    var addressObj = service.GetAddressByIdAsync(billingAddress ?? 0).Result;
    var name = addressObj?.FirstName;
    var phone = addressObj?.PhoneNumber;

    var children = service.GetRelatedAddressByIdAsync(phone).Result;

    if (string.IsNullOrWhiteSpace(name))
    {
        name = "Sin Nombre";
    }
}
@inject Nop.Core.IWorkContext workContext
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })
    @*@if (Model.ShipToSameAddressAllowed)
        {
            <div class="section ship-to-same-address">
                <p class="selector">
                    <input asp-for="ShipToSameAddress"/>
                    <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                </p>
            </div>
        }*@
    @if (children.Count > 0)
    {
        <div class="section select-billing-address">
            <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            <div>
                <select name="billing_address_id" id="billing-address-select" class="address-select"
                        title="" onchange="Billing.resetBillingForm();Billing.newAddress(!this.value)">
                    @foreach (var address in children)
                    {
                        if (address.Id == billingAddress)
                        {
                            <option value="@(address.Id)" selected="selected">@(address.FirstName)</option>
                        }
                        else
                        {
                            <option value="@(address.Id)">@(address.FirstName)</option>
                        }
                    }
                    <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                    @if (children.Count < 7)
                    {
                        <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
                    }
                </select>
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })
    <div class="section new-billing-address" style="@(string.IsNullOrWhiteSpace(currentCustomer?.Username) ? "display:none" : "display:block")">
        <div class="enter-address">
            <p>Hola de nuevo! @name</p>
        </div>
    </div>
    <div class="section new-billing-address" id="billing-new-address-form" style="@(string.IsNullOrWhiteSpace(currentCustomer?.Username) ? "display:block" : "display:none")">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress1", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    <input type="hidden" id="billing_address_id" name="hdn_billing_address_id" value="@billingAddress" />

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })
</div>
