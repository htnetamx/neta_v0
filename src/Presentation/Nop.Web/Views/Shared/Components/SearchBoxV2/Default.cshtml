@model SearchBoxModel
<div class="topic-block" style="margin:0px;padding: 0px;display:none">
    <div class="topic-block-title" style="margin: 0px; padding: 0px; min-height: 0px">
        <a href="@Url.RouteUrl("Homepage")" style="text-decoration:none;">
            <h2 id="storeNameSearch" href="@Url.RouteUrl("Homepage")">@Model.CurrentStoreName</h2>
        </a>
    </div>
</div>
@{
    string absoluteurl = Context.Request.Path;
    if (!absoluteurl.Contains("search"))
    {
        <form asp-route="ProductSearch" method="get" id="small-search-box-form" style="display: flex;flex-wrap: wrap">
            @if (Model.ShowSearchBox)
            {
                <div style="margin-bottom: 2vh;width: 100%;position:relative;align-items:center;display:flex">
                    <div id="lupa_icon" style="width:5%;position:absolute;left:15px">
                        <img src="images/header2/Search.svg" alt="">
                    </div>
                    <input type="text" id="small-searchterms" autocomplete="off" name="q" placeholder="@T("Search.SearchBox.Tooltip")" aria-label="@T("Search.SearchBox.Text.Label")" style="background: #F3F3F3; border: 1px solid #D8D8D8; box-sizing: border-box; box-shadow: 0px 6px 8px rgba(0, 0, 0, 0.05); border-radius: 24px; width: 100%" />
                </div>
               @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBoxBeforeSearchButton })
                @if (Model.SearchTermMinimumLength > 0)
                {
                    <script asp-location="Footer">
                    $("#small-search-box-form").on("submit", function(event) {
                        if ($("#small-searchterms").val() == "") {
                            alert('@Html.Raw(JavaScriptEncoder.Default.Encode(T("Search.EnterSearchTerms").Text))');
                            $("#small-searchterms").focus();
                            event.preventDefault();
                        }
                    });
                    </script>
                }

                @if (Model.AutoCompleteEnabled)
                {
                    <script asp-location="Footer">
                    $(document).ready(function() {
                        var showLinkToResultSearch;
                        var searchText;
                        $('#small-searchterms').autocomplete({
                                delay: 500,
                                minLength: @(Model.SearchTermMinimumLength.ToString()),
                                source: '@(Url.RouteUrl("ProductSearchAutoComplete"))',
                                appendTo: '.search-box',
                                select: function(event, ui) {
                                    $("#small-searchterms").val(ui.item.label);
                                    setLocation(ui.item.producturl);
                                    return false;
                            },
                            //append link to the end of list
                            open: function(event, ui) {
                                //display link to search page
                                if (showLinkToResultSearch) {
                                    searchText = document.getElementById("small-searchterms").value;
                                    $(".ui-autocomplete").append("<li class=\"ui-menu-item\" role=\"presentation\"><a href=\"/search?q=" + searchText + "\">@T("Search.SearchBox.SearchPageLink")</a></li>");
                                }
                            }
                        })
                        .data("ui-autocomplete")._renderItem = function(ul, item) {
                            var t = item.label;
                            showLinkToResultSearch = item.showlinktoresultsearch;
                            //html encode
                            t = htmlEncode(t);
                            return $("<li></li>")
                                .data("item.autocomplete", item)
                                .append("<a>@(Model.ShowProductImagesInSearchAutoComplete ? Html.Raw("<img src='\" + item.productpictureurl + \"'>") : null)<span>" + t + "</span></a>")
                                .appendTo(ul);
                        };
                    });
                    </script>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.SearchBox })
            }
        </form>
    }
}