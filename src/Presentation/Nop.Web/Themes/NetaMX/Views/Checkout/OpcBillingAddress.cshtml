@model CheckoutBillingAddressModel
@using Nop.Core.Infrastructure
@using Nop.Core
@inject IWebHelper webHelper
@{
    var service = EngineContext.Current.Resolve<Nop.Services.Common.IAddressService>();
    var currentCustomer = workContext.GetCurrentCustomerAsync().Result;
    var billingAddress = currentCustomer?.BillingAddressId;
    var addressObj = service.GetAddressByIdAsync(billingAddress ?? 0).Result;
    var name = addressObj?.FirstName;
    var phone = addressObj?.PhoneNumber;

    var storeLocation = webHelper.GetStoreLocation();

    var children = service.GetRelatedAddressByIdAsync(phone).Result;

    if (string.IsNullOrWhiteSpace(name))
    {
        name = "Sin Nombre";
    }
}
@inject Nop.Core.IWorkContext workContext
<div class="checkout-data">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressTop })
    @*@if (Model.ShipToSameAddressAllowed)
        {
            <div class="section ship-to-same-address">
                <p class="selector">
                    <input asp-for="ShipToSameAddress"/>
                    <label asp-for="ShipToSameAddress">@T("Checkout.ShipToSameAddress")</label>
                </p>
            </div>
        }*@
    @if (children.Count > 0)
    {
        <div class="section select-billing-address">
            <div class="text">
                <label for="billing-address-select">@T("Checkout.SelectBillingAddressOrEnterNewOne")</label>
            </div>
            <div class="list-address-view">
                <ul>
                    @{
                        var i = 0;
                        foreach (var address in children)
                        {
                            if (i == 0)
                            {
                                        <li>
                                            <div class="name"><span>A</span><h2 class="title">@(address.FirstName)</h2></div>
                                            @if (children.Count > 1)
                                            {
                                                <div class="check-btn">
                                                    <button type="button" name="save" class="checkbox selected new-address-next-step-button" onclick="Billing.save(@(address.Id))">Seleccionar</button>
                                                </div>
                                            }
                                        </li>
                                i = 1;
                            }
                            else
                            {
                                <li>
                                    <div class="name"><span>A</span><h2 class="title">@(address.FirstName)</h2></div>
                                    <div class="check-btn">
                                        @*<button id="delete-address-button" type="button" class="remove-link" onclick="Billing.deleteAddress('@(storeLocation)checkout/DeleteEditAddress/', @(address.Id), '@(address.FirstName)'); return false;">@T("Common.Delete")</button>*@
                                        <button id="delete-address-button" type="button" class="remove-link" onclick="ShowConfirmBox('@(storeLocation)checkout/DeleteEditAddress/', @(address.Id), '@(address.FirstName)'); return false;">@T("Common.Delete")</button>
                                        <button type="button" name="save" class="checkbox new-address-next-step-button" onclick="Billing.save(@(address.Id))">Seleccionar</button>
                                    </div>
                                </li>
                            }
                        }
                    }
                </ul>
                <input type="hidden" id="billing_address_id" name="billing_address_id" />
            </div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressMiddle })
    @*<div class="section new-billing-address" style="@(string.IsNullOrWhiteSpace(currentCustomer?.Username) ? "display:none" : "display:block")">
            <div class="enter-address">
                <p>Hola de nuevo! @name</p>
            </div>
        </div>*@
    <div class="section new-billing-address" id="billing-new-address-form" style="@(string.IsNullOrWhiteSpace(currentCustomer?.Username) ? "display:block" : "display:none")">
        <div class="enter-address">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                @await Html.PartialAsync("_CreateOrUpdateAddress1", Model.BillingNewAddress, dataDictAddress)
            }
        </div>
    </div>
    <input type="hidden" id="billing_address_id" name="hdn_billing_address_id" value="@billingAddress" />

    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutBillingAddressBottom })
</div>

<div class="confirm-popup">
    <div class="content">
        <h2>Eliminar cuenta</h2>
        <p>
            Seguro que deseas eliminar a <span id="deleteName"></span> de tu lista de amigos?
        </p>
        <div class="conf-btn">
            <input type="hidden" id="deleteUrl" />
            <input type="hidden" id="deleteId" />
            <a onclick="CloseConfirm()">Salir</a>
            <a onclick="deleteAddress()">Eliminar</a>
        </div>
    </div>
</div>
<div class="confirm-overlayer"></div>
<script>
    function ShowConfirmBox(url, id, name) {
        $("#deleteUrl").val(url);
        $("#deleteId").val(id);
        $("#deleteName").text(name);
        $(".confirm-popup").addClass("active");
        $(".confirm-overlayer").addClass("active");
    }
    function deleteAddress() {
        Billing.deleteAddress($("#deleteUrl").val(), $("#deleteId").val());
    }
    function CloseConfirm() {
        $(".confirm-popup").removeClass("active");
        $(".confirm-overlayer").removeClass("active");
    }
</script>