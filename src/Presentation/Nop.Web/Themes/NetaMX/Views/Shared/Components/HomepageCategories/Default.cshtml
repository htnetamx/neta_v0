@model IList<CategoryModel>
    @if (Model.Count > 0)
    {
    <div class="cate-title">
        <h2>Pasillos</h2>
        <a>Deslizar<i></i></a>
        <div class="clr"></div>
    </div>

    <div class="category-grid home-page-category-grid">
        <div class="item-grid owl-carousel" id="category-slider">
            @{ var count = 0;}
            @foreach (var item in Model)
            {
                <div class="category-item" data-slide-index="@count">
                    <h2 class="title">
                        <a href="@Url.RouteUrl("Category", new {SeName=item.SeName})" title="@item.PictureModel.Title">
                            @item.Name
                        </a>
                    </h2>
                    <div class="cus-picture">
                        <a href="@Url.RouteUrl("Category", new {SeName=item.SeName})" title="@item.PictureModel.Title">
                            <img alt="@item.PictureModel.AlternateText" src="@item.PictureModel.ImageUrl" title="@item.PictureModel.Title" />
                        </a>
                    </div>
                </div>
                count++;
            }
        </div>
    </div>
    @*<script asp-location="Footer">
        $(document).ready(function () {
            $('#category-slider').owlCarousel({
                margin: 15,
                loop: false,
                autoWidth: true,
                items: 10,
                dots: false,
                nav: false
            })
        });
    </script>*@
    }

<script asp-location="Footer">
    $(document).ready(function () {
        var el = $('#category-slider');

        var carousel;
        var carouselOptions = {
            margin: 10,
            nav: false,
            dots: false,
            autoWidth: true,
            responsive: {
                0: {
                    items: 1,
                    rows: 2
                },
                768: {
                    items: 2,
                    rows: 3
                },
                991: {
                    items: 3,
                    rows: 2
                }
            }
        };

        //Taken from Owl Carousel so we calculate width the same way
        var viewport = function () {
            var width;
            if (carouselOptions.responsiveBaseElement && carouselOptions.responsiveBaseElement !== window) {
                width = $(carouselOptions.responsiveBaseElement).width();
            } else if (window.innerWidth) {
                width = window.innerWidth;
            } else if (document.documentElement && document.documentElement.clientWidth) {
                width = document.documentElement.clientWidth;
            } else {
                console.warn('Can not detect viewport width.');
            }
            return width;
        };

        var severalRows = false;
        var orderedBreakpoints = [];
        for (var breakpoint in carouselOptions.responsive) {
            if (carouselOptions.responsive[breakpoint].rows > 1) {
                severalRows = true;
            }
            orderedBreakpoints.push(parseInt(breakpoint));
        }

        //Custom logic is active if carousel is set up to have more than one row for some given window width
        if (severalRows) {
            orderedBreakpoints.sort(function (a, b) {
                return b - a;
            });
            var slides = el.find('[data-slide-index]');
            var slidesNb = slides.length;
            if (slidesNb > 0) {
                var rowsNb;
                var previousRowsNb = undefined;
                var colsNb;
                var previousColsNb = undefined;

                //Calculates number of rows and cols based on current window width
                var updateRowsColsNb = function () {
                    var width = viewport();
                    for (var i = 0; i < orderedBreakpoints.length; i++) {
                        var breakpoint = orderedBreakpoints[i];
                        if (width >= breakpoint || i == (orderedBreakpoints.length - 1)) {
                            var breakpointSettings = carouselOptions.responsive['' + breakpoint];
                            rowsNb = breakpointSettings.rows;
                            colsNb = breakpointSettings.items;
                            break;
                        }
                    }
                };

                var updateCarousel = function () {
                    updateRowsColsNb();

                    //Carousel is recalculated if and only if a change in number of columns/rows is requested
                    if (rowsNb != previousRowsNb || colsNb != previousColsNb) {
                        var reInit = false;
                        if (carousel) {
                            //Destroy existing carousel if any, and set html markup back to its initial state
                            carousel.trigger('destroy.owl.carousel');
                            carousel = undefined;
                            slides = el.find('[data-slide-index]').detach().appendTo(el);
                            el.find('.fake-col-wrapper').remove();
                            reInit = true;
                        }


                        //This is the only real 'smart' part of the algorithm

                        //First calculate the number of needed columns for the whole carousel
                        var perPage = rowsNb * colsNb;
                        var pageIndex = Math.floor(slidesNb / perPage);
                        var fakeColsNb = pageIndex * colsNb + (slidesNb >= (pageIndex * perPage + colsNb) ? colsNb : (slidesNb % colsNb));

                        //Then populate with needed html markup
                        var count = 0;
                        for (var i = 0; i < fakeColsNb; i++) {
                            //For each column, create a new wrapper div
                            var fakeCol = $('<div class="fake-col-wrapper"></div>').appendTo(el);
                            for (var j = 0; j < rowsNb; j++) {
                                //For each row in said column, calculate which slide should be present
                                var index = Math.floor(count / perPage) * perPage + (i % colsNb) + j * colsNb;
                                if (index < slidesNb) {
                                    //If said slide exists, move it under wrapper div
                                    slides.filter('[data-slide-index=' + index + ']').detach().appendTo(fakeCol);
                                }
                                count++;
                            }
                        }
                        //end of 'smart' part

                        previousRowsNb = rowsNb;
                        previousColsNb = colsNb;

                        if (reInit) {
                            //re-init carousel with new markup
                            carousel = el.owlCarousel(carouselOptions);
                        }
                    }
                };

                //Trigger possible update when window size changes
                $(window).on('resize', updateCarousel);

                //We need to execute the algorithm once before first init in any case
                updateCarousel();
            }
        }

        //init
        carousel = el.owlCarousel(carouselOptions);
    });
</script>