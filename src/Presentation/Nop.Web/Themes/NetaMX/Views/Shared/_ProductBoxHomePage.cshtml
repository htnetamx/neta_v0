@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@using Nop.Services.Catalog
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext
@inject IProductService  productService
@{
    var product = await productService.GetProductByIdAsync(Model.Id);

    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var removetocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    var quantityMin = -1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        removetocartlink = Url.RouteUrl("AddProductToCart-CatalogMin", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantityMin, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart, isMinusQty = true });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        removetocartlink = Url.RouteUrl("AddProductToCart-CatalogMin", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantityMin, isMinusQty = true });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}
<div class="product-item" data-productid="@Model.Id">
    <div class="picture" style="margin: 0px">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    <div class="details">
        <div class="prd-top">
            @if (!string.IsNullOrEmpty(Model.ProductPrice.TotalSavingOnProduct))
            {
            <div class="left">
                <img class="owlimg" src="\Themes\NetaMX\Content\images\Dis.icon.png" />
                <span style="float:right;">-@Model.ProductPrice.TotalSavingOnProduct</span>
            </div>
            }
            @*<div class="right">300 Unidades</div>*@
        </div>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
        }
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            @*<div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                    <div class="rating">
                        <div style="width: @(ratingPercent)%">
                        </div>
                    </div>
                </div>*@
        }
        <div class="description">
            @Html.Raw(Model.ShortDescription)
        </div>
        @if (Model.MarkAsNew)
        {
            @try
            {
                @await Html.PartialAsync("_Availability", Model.Details)
            }
            catch (Exception exc)
            {
                <div>@exc.Message</div>
            }
        }
        <div class="add-info">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoBefore, additionalData = Model })
            <div class="price-Qs">
                <div class="prices">
                    <span class="price actual-price">@Model.ProductPrice.Price</span>
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="old-rate">@Model.ProductPrice.OldPrice</span>
                    }

                    @if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = await workContext.GetTaxDisplayTypeAsync() == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = await Html.GetTopicSeNameAsync("shippinginfo") }))
                        </span>
                    }
                    @if (!string.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <div class="base-price-pangv">
                            @Model.ProductPrice.BasePricePAngV
                        </div>
                    }
                </div>
            </div>
            <div class="prices">
                <span class="price">En Carrito:</span>
                <span class="price quantity" id="currentQty_@Model.Id">@Model.Details.CurrentProductQuantity</span>
            </div>
            <div class="new-product-title prd-title-new" style="">
                <a href="@Url.RouteUrl("Product", new {SeName = Model.SeName})" style="text-decoration: none;">@Model.Name</a>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoMiddle, additionalData = Model })
            <div class="buttons">
                @*<button type="button" class="button-1 product-box-detail-button" onclick="setLocation('@Url.RouteUrl("Product", new { SeName = Model.SeName })')">@T("Products.Details")</button>*@
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <button type="button" class="button-2 product-box-add-to-cart-button" onclick="AddTocart_@(Model.Id)('@addtocartlink',$('#currentQty_@Model.Id'));return false;">@(addToCartText)</button>
                    <script>
                        function AddTocart_@(Model.Id)(url,element)
                        {
                            AjaxCart.addproducttocart_catalog(url, element);
                            $("#prdparent-@(Model.Id)").addClass("active");
                        }
                    </script>
                }
                else
                {
                    <button type="button" class="button-2 disableButton">@T("ShoppingCart.AddToCart.NoQty")</button>
                }
                @if (!Model.ProductPrice.DisableAddToCompareListButton)
                {
                    @*<button type="button" class="button-2 add-to-compare-list-button" title="@T("ShoppingCart.AddToCompareList")" onclick="AjaxCart.addproducttocomparelist('@addtocomparelink');return false;">@T("ShoppingCart.AddToCompareList")</button>*@
                }
                @if (!Model.ProductPrice.DisableWishlistButton)
                {
                    @*<button type="button" class="button-2 add-to-wishlist-button" title="@T("ShoppingCart.AddToWishlist")" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink');return false;">@T("ShoppingCart.AddToWishlist")</button>*@
                }
                @{ 
                    var currentQty = Model.Details.CurrentProductQuantity;
                    if (product.StockQuantity > Model.Details.CurrentProductQuantity)
                    {
                        currentQty++;
                    }
                }
                <div class="add-quantity" id="prdparent-@Model.Id">
                    <span data-quantity="minus" class="icon minus"></span>
                    <input id="itemquantity@(Model.Id)" class="qty-input@(Model.Id)" type="text" value="@(currentQty)" />
                    <span data-quantity="plus" class="icon plus"></span>
                </div>
                <script asp-location="Footer">
                    $(document).ready(function () {
                        // This button will increment the value
                        $('[data-quantity="plus"]',"#prdparent-@Model.Id").click(function (e) {
                            // Stop acting like a button
                            e.preventDefault();
                            // Get the field name
                            fieldName = $(this).attr('data-field');
                            // Get its current value
                            var currentVal = parseInt($('#itemquantity@(Model.Id)').val());
                            // If is not undefined
                            if (!isNaN(currentVal)) {
                                // Increment
                                if (@(product.StockQuantity) > currentVal) {
                                    var qty = currentVal + 1;
                                    $('#itemquantity@(Model.Id)').val(qty);
                                    AjaxCart.addproducttocart_catalog('@addtocartlink', $('#currentQty_@Model.Id'));
                                }
                            } else {
                                // Otherwise put a 0 there
                                $('#itemquantity@(Model.Id)').val(0);
                            }
                        });
                        // This button will decrement the value till 0
                        $('[data-quantity="minus"]',"#prdparent-@Model.Id").click(function (e) {
                            // Stop acting like a button
                            e.preventDefault();
                            // Get the field name
                            fieldName = $(this).attr('data-field');
                            // Get its current value
                            var currentVal = parseInt($('#itemquantity@(Model.Id)').val());
                            // If it isn't undefined or its greater than 0
                            if (!isNaN(currentVal) && currentVal > 0) {
                                // Decrement one
                                if (currentVal > 1) {
                                    var qty = currentVal - 1;
                                    $('#itemquantity@(Model.Id)').val(qty);
                                    AjaxCart.addproducttocart_catalog('@removetocartlink', $('#currentQty_@Model.Id'));
                                }
                            } else {
                                // Otherwise put a 0 there
                                $('#itemquantity@(Model.Id)').val(0);
                            }
                        });
                    });
                </script>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductBoxAddinfoAfter, additionalData = Model })
        </div>
    </div>
</div>
